// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compose

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wttech/pulumi-aem-native/sdk/go/aem/internal"
)

type Instance struct {
	pulumi.CustomResourceState

	// Connection settings used to access the machine on which the AEM instance will be running.
	Client ClientOutput `pulumi:"client"`
	// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
	Compose ComposePtrOutput `pulumi:"compose"`
	// Files or directories to be copied into the machine.
	Files pulumi.StringMapOutput `pulumi:"files"`
	// Current state of the configured AEM instances.
	Instances InstanceModelArrayOutput `pulumi:"instances"`
	// Operating system configuration for the machine on which AEM instance will be running.
	System SystemPtrOutput `pulumi:"system"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Client == nil {
		return nil, errors.New("invalid value for required argument 'Client'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("aem:compose:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("aem:compose:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
}

type InstanceState struct {
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Connection settings used to access the machine on which the AEM instance will be running.
	Client Client `pulumi:"client"`
	// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
	Compose *Compose `pulumi:"compose"`
	// Files or directories to be copied into the machine.
	Files map[string]string `pulumi:"files"`
	// Operating system configuration for the machine on which AEM instance will be running.
	System *System `pulumi:"system"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Connection settings used to access the machine on which the AEM instance will be running.
	Client ClientInput
	// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
	Compose ComposePtrInput
	// Files or directories to be copied into the machine.
	Files pulumi.StringMapInput
	// Operating system configuration for the machine on which AEM instance will be running.
	System SystemPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Connection settings used to access the machine on which the AEM instance will be running.
func (o InstanceOutput) Client() ClientOutput {
	return o.ApplyT(func(v *Instance) ClientOutput { return v.Client }).(ClientOutput)
}

// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
func (o InstanceOutput) Compose() ComposePtrOutput {
	return o.ApplyT(func(v *Instance) ComposePtrOutput { return v.Compose }).(ComposePtrOutput)
}

// Files or directories to be copied into the machine.
func (o InstanceOutput) Files() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Files }).(pulumi.StringMapOutput)
}

// Current state of the configured AEM instances.
func (o InstanceOutput) Instances() InstanceModelArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceModelArrayOutput { return v.Instances }).(InstanceModelArrayOutput)
}

// Operating system configuration for the machine on which AEM instance will be running.
func (o InstanceOutput) System() SystemPtrOutput {
	return o.ApplyT(func(v *Instance) SystemPtrOutput { return v.System }).(SystemPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterOutputType(InstanceOutput{})
}
