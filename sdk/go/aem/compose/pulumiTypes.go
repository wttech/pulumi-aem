// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compose

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wttech/pulumi-aem-native/sdk/go/aem/internal"
)

var _ = internal.GetEnvOrDefault

type ClientModel struct {
	Action_timeout *string           `pulumi:"action_timeout"`
	Credentials    map[string]string `pulumi:"credentials"`
	Settings       map[string]string `pulumi:"settings"`
	State_timeout  *string           `pulumi:"state_timeout"`
	Type           string            `pulumi:"type"`
}

// ClientModelInput is an input type that accepts ClientModelArgs and ClientModelOutput values.
// You can construct a concrete instance of `ClientModelInput` via:
//
//	ClientModelArgs{...}
type ClientModelInput interface {
	pulumi.Input

	ToClientModelOutput() ClientModelOutput
	ToClientModelOutputWithContext(context.Context) ClientModelOutput
}

type ClientModelArgs struct {
	Action_timeout pulumi.StringPtrInput `pulumi:"action_timeout"`
	Credentials    pulumi.StringMapInput `pulumi:"credentials"`
	Settings       pulumi.StringMapInput `pulumi:"settings"`
	State_timeout  pulumi.StringPtrInput `pulumi:"state_timeout"`
	Type           pulumi.StringInput    `pulumi:"type"`
}

func (ClientModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientModel)(nil)).Elem()
}

func (i ClientModelArgs) ToClientModelOutput() ClientModelOutput {
	return i.ToClientModelOutputWithContext(context.Background())
}

func (i ClientModelArgs) ToClientModelOutputWithContext(ctx context.Context) ClientModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientModelOutput)
}

type ClientModelOutput struct{ *pulumi.OutputState }

func (ClientModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientModel)(nil)).Elem()
}

func (o ClientModelOutput) ToClientModelOutput() ClientModelOutput {
	return o
}

func (o ClientModelOutput) ToClientModelOutputWithContext(ctx context.Context) ClientModelOutput {
	return o
}

func (o ClientModelOutput) Action_timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientModel) *string { return v.Action_timeout }).(pulumi.StringPtrOutput)
}

func (o ClientModelOutput) Credentials() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClientModel) map[string]string { return v.Credentials }).(pulumi.StringMapOutput)
}

func (o ClientModelOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClientModel) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o ClientModelOutput) State_timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientModel) *string { return v.State_timeout }).(pulumi.StringPtrOutput)
}

func (o ClientModelOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClientModel) string { return v.Type }).(pulumi.StringOutput)
}

type ComposeModel struct {
	Config    *string         `pulumi:"config"`
	Configure *InstanceScript `pulumi:"configure"`
	Create    *InstanceScript `pulumi:"create"`
	Delete    *InstanceScript `pulumi:"delete"`
	Download  *bool           `pulumi:"download"`
	Version   *string         `pulumi:"version"`
}

// ComposeModelInput is an input type that accepts ComposeModelArgs and ComposeModelOutput values.
// You can construct a concrete instance of `ComposeModelInput` via:
//
//	ComposeModelArgs{...}
type ComposeModelInput interface {
	pulumi.Input

	ToComposeModelOutput() ComposeModelOutput
	ToComposeModelOutputWithContext(context.Context) ComposeModelOutput
}

type ComposeModelArgs struct {
	Config    pulumi.StringPtrInput  `pulumi:"config"`
	Configure InstanceScriptPtrInput `pulumi:"configure"`
	Create    InstanceScriptPtrInput `pulumi:"create"`
	Delete    InstanceScriptPtrInput `pulumi:"delete"`
	Download  pulumi.BoolPtrInput    `pulumi:"download"`
	Version   pulumi.StringPtrInput  `pulumi:"version"`
}

func (ComposeModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposeModel)(nil)).Elem()
}

func (i ComposeModelArgs) ToComposeModelOutput() ComposeModelOutput {
	return i.ToComposeModelOutputWithContext(context.Background())
}

func (i ComposeModelArgs) ToComposeModelOutputWithContext(ctx context.Context) ComposeModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposeModelOutput)
}

func (i ComposeModelArgs) ToComposeModelPtrOutput() ComposeModelPtrOutput {
	return i.ToComposeModelPtrOutputWithContext(context.Background())
}

func (i ComposeModelArgs) ToComposeModelPtrOutputWithContext(ctx context.Context) ComposeModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposeModelOutput).ToComposeModelPtrOutputWithContext(ctx)
}

// ComposeModelPtrInput is an input type that accepts ComposeModelArgs, ComposeModelPtr and ComposeModelPtrOutput values.
// You can construct a concrete instance of `ComposeModelPtrInput` via:
//
//	        ComposeModelArgs{...}
//
//	or:
//
//	        nil
type ComposeModelPtrInput interface {
	pulumi.Input

	ToComposeModelPtrOutput() ComposeModelPtrOutput
	ToComposeModelPtrOutputWithContext(context.Context) ComposeModelPtrOutput
}

type composeModelPtrType ComposeModelArgs

func ComposeModelPtr(v *ComposeModelArgs) ComposeModelPtrInput {
	return (*composeModelPtrType)(v)
}

func (*composeModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposeModel)(nil)).Elem()
}

func (i *composeModelPtrType) ToComposeModelPtrOutput() ComposeModelPtrOutput {
	return i.ToComposeModelPtrOutputWithContext(context.Background())
}

func (i *composeModelPtrType) ToComposeModelPtrOutputWithContext(ctx context.Context) ComposeModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposeModelPtrOutput)
}

type ComposeModelOutput struct{ *pulumi.OutputState }

func (ComposeModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposeModel)(nil)).Elem()
}

func (o ComposeModelOutput) ToComposeModelOutput() ComposeModelOutput {
	return o
}

func (o ComposeModelOutput) ToComposeModelOutputWithContext(ctx context.Context) ComposeModelOutput {
	return o
}

func (o ComposeModelOutput) ToComposeModelPtrOutput() ComposeModelPtrOutput {
	return o.ToComposeModelPtrOutputWithContext(context.Background())
}

func (o ComposeModelOutput) ToComposeModelPtrOutputWithContext(ctx context.Context) ComposeModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComposeModel) *ComposeModel {
		return &v
	}).(ComposeModelPtrOutput)
}

func (o ComposeModelOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposeModel) *string { return v.Config }).(pulumi.StringPtrOutput)
}

func (o ComposeModelOutput) Configure() InstanceScriptPtrOutput {
	return o.ApplyT(func(v ComposeModel) *InstanceScript { return v.Configure }).(InstanceScriptPtrOutput)
}

func (o ComposeModelOutput) Create() InstanceScriptPtrOutput {
	return o.ApplyT(func(v ComposeModel) *InstanceScript { return v.Create }).(InstanceScriptPtrOutput)
}

func (o ComposeModelOutput) Delete() InstanceScriptPtrOutput {
	return o.ApplyT(func(v ComposeModel) *InstanceScript { return v.Delete }).(InstanceScriptPtrOutput)
}

func (o ComposeModelOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComposeModel) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

func (o ComposeModelOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposeModel) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComposeModelPtrOutput struct{ *pulumi.OutputState }

func (ComposeModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposeModel)(nil)).Elem()
}

func (o ComposeModelPtrOutput) ToComposeModelPtrOutput() ComposeModelPtrOutput {
	return o
}

func (o ComposeModelPtrOutput) ToComposeModelPtrOutputWithContext(ctx context.Context) ComposeModelPtrOutput {
	return o
}

func (o ComposeModelPtrOutput) Elem() ComposeModelOutput {
	return o.ApplyT(func(v *ComposeModel) ComposeModel {
		if v != nil {
			return *v
		}
		var ret ComposeModel
		return ret
	}).(ComposeModelOutput)
}

func (o ComposeModelPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

func (o ComposeModelPtrOutput) Configure() InstanceScriptPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *InstanceScript {
		if v == nil {
			return nil
		}
		return v.Configure
	}).(InstanceScriptPtrOutput)
}

func (o ComposeModelPtrOutput) Create() InstanceScriptPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *InstanceScript {
		if v == nil {
			return nil
		}
		return v.Create
	}).(InstanceScriptPtrOutput)
}

func (o ComposeModelPtrOutput) Delete() InstanceScriptPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *InstanceScript {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(InstanceScriptPtrOutput)
}

func (o ComposeModelPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

func (o ComposeModelPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComposeModel) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type InstanceModel struct {
	Aem_version string   `pulumi:"aem_version"`
	Attributes  []string `pulumi:"attributes"`
	Dir         string   `pulumi:"dir"`
	Id          string   `pulumi:"id"`
	Run_modes   []string `pulumi:"run_modes"`
	Url         string   `pulumi:"url"`
}

type InstanceModelOutput struct{ *pulumi.OutputState }

func (InstanceModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceModel)(nil)).Elem()
}

func (o InstanceModelOutput) ToInstanceModelOutput() InstanceModelOutput {
	return o
}

func (o InstanceModelOutput) ToInstanceModelOutputWithContext(ctx context.Context) InstanceModelOutput {
	return o
}

func (o InstanceModelOutput) Aem_version() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceModel) string { return v.Aem_version }).(pulumi.StringOutput)
}

func (o InstanceModelOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceModel) []string { return v.Attributes }).(pulumi.StringArrayOutput)
}

func (o InstanceModelOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceModel) string { return v.Dir }).(pulumi.StringOutput)
}

func (o InstanceModelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceModel) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstanceModelOutput) Run_modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceModel) []string { return v.Run_modes }).(pulumi.StringArrayOutput)
}

func (o InstanceModelOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceModel) string { return v.Url }).(pulumi.StringOutput)
}

type InstanceModelArrayOutput struct{ *pulumi.OutputState }

func (InstanceModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceModel)(nil)).Elem()
}

func (o InstanceModelArrayOutput) ToInstanceModelArrayOutput() InstanceModelArrayOutput {
	return o
}

func (o InstanceModelArrayOutput) ToInstanceModelArrayOutputWithContext(ctx context.Context) InstanceModelArrayOutput {
	return o
}

func (o InstanceModelArrayOutput) Index(i pulumi.IntInput) InstanceModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceModel {
		return vs[0].([]InstanceModel)[vs[1].(int)]
	}).(InstanceModelOutput)
}

type InstanceScript struct {
	Inline []string `pulumi:"inline"`
	Script *string  `pulumi:"script"`
}

// InstanceScriptInput is an input type that accepts InstanceScriptArgs and InstanceScriptOutput values.
// You can construct a concrete instance of `InstanceScriptInput` via:
//
//	InstanceScriptArgs{...}
type InstanceScriptInput interface {
	pulumi.Input

	ToInstanceScriptOutput() InstanceScriptOutput
	ToInstanceScriptOutputWithContext(context.Context) InstanceScriptOutput
}

type InstanceScriptArgs struct {
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	Script pulumi.StringPtrInput   `pulumi:"script"`
}

func (InstanceScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScript)(nil)).Elem()
}

func (i InstanceScriptArgs) ToInstanceScriptOutput() InstanceScriptOutput {
	return i.ToInstanceScriptOutputWithContext(context.Background())
}

func (i InstanceScriptArgs) ToInstanceScriptOutputWithContext(ctx context.Context) InstanceScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceScriptOutput)
}

func (i InstanceScriptArgs) ToInstanceScriptPtrOutput() InstanceScriptPtrOutput {
	return i.ToInstanceScriptPtrOutputWithContext(context.Background())
}

func (i InstanceScriptArgs) ToInstanceScriptPtrOutputWithContext(ctx context.Context) InstanceScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceScriptOutput).ToInstanceScriptPtrOutputWithContext(ctx)
}

// InstanceScriptPtrInput is an input type that accepts InstanceScriptArgs, InstanceScriptPtr and InstanceScriptPtrOutput values.
// You can construct a concrete instance of `InstanceScriptPtrInput` via:
//
//	        InstanceScriptArgs{...}
//
//	or:
//
//	        nil
type InstanceScriptPtrInput interface {
	pulumi.Input

	ToInstanceScriptPtrOutput() InstanceScriptPtrOutput
	ToInstanceScriptPtrOutputWithContext(context.Context) InstanceScriptPtrOutput
}

type instanceScriptPtrType InstanceScriptArgs

func InstanceScriptPtr(v *InstanceScriptArgs) InstanceScriptPtrInput {
	return (*instanceScriptPtrType)(v)
}

func (*instanceScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceScript)(nil)).Elem()
}

func (i *instanceScriptPtrType) ToInstanceScriptPtrOutput() InstanceScriptPtrOutput {
	return i.ToInstanceScriptPtrOutputWithContext(context.Background())
}

func (i *instanceScriptPtrType) ToInstanceScriptPtrOutputWithContext(ctx context.Context) InstanceScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceScriptPtrOutput)
}

type InstanceScriptOutput struct{ *pulumi.OutputState }

func (InstanceScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScript)(nil)).Elem()
}

func (o InstanceScriptOutput) ToInstanceScriptOutput() InstanceScriptOutput {
	return o
}

func (o InstanceScriptOutput) ToInstanceScriptOutputWithContext(ctx context.Context) InstanceScriptOutput {
	return o
}

func (o InstanceScriptOutput) ToInstanceScriptPtrOutput() InstanceScriptPtrOutput {
	return o.ToInstanceScriptPtrOutputWithContext(context.Background())
}

func (o InstanceScriptOutput) ToInstanceScriptPtrOutputWithContext(ctx context.Context) InstanceScriptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceScript) *InstanceScript {
		return &v
	}).(InstanceScriptPtrOutput)
}

func (o InstanceScriptOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceScript) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

func (o InstanceScriptOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceScript) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type InstanceScriptPtrOutput struct{ *pulumi.OutputState }

func (InstanceScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceScript)(nil)).Elem()
}

func (o InstanceScriptPtrOutput) ToInstanceScriptPtrOutput() InstanceScriptPtrOutput {
	return o
}

func (o InstanceScriptPtrOutput) ToInstanceScriptPtrOutputWithContext(ctx context.Context) InstanceScriptPtrOutput {
	return o
}

func (o InstanceScriptPtrOutput) Elem() InstanceScriptOutput {
	return o.ApplyT(func(v *InstanceScript) InstanceScript {
		if v != nil {
			return *v
		}
		var ret InstanceScript
		return ret
	}).(InstanceScriptOutput)
}

func (o InstanceScriptPtrOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceScript) []string {
		if v == nil {
			return nil
		}
		return v.Inline
	}).(pulumi.StringArrayOutput)
}

func (o InstanceScriptPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceScript) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

type SystemModel struct {
	Bootstrap      *InstanceScript   `pulumi:"bootstrap"`
	Data_dir       *string           `pulumi:"data_dir"`
	Env            map[string]string `pulumi:"env"`
	Service_config *string           `pulumi:"service_config"`
	User           *string           `pulumi:"user"`
	Work_dir       *string           `pulumi:"work_dir"`
}

// SystemModelInput is an input type that accepts SystemModelArgs and SystemModelOutput values.
// You can construct a concrete instance of `SystemModelInput` via:
//
//	SystemModelArgs{...}
type SystemModelInput interface {
	pulumi.Input

	ToSystemModelOutput() SystemModelOutput
	ToSystemModelOutputWithContext(context.Context) SystemModelOutput
}

type SystemModelArgs struct {
	Bootstrap      InstanceScriptPtrInput `pulumi:"bootstrap"`
	Data_dir       pulumi.StringPtrInput  `pulumi:"data_dir"`
	Env            pulumi.StringMapInput  `pulumi:"env"`
	Service_config pulumi.StringPtrInput  `pulumi:"service_config"`
	User           pulumi.StringPtrInput  `pulumi:"user"`
	Work_dir       pulumi.StringPtrInput  `pulumi:"work_dir"`
}

func (SystemModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemModel)(nil)).Elem()
}

func (i SystemModelArgs) ToSystemModelOutput() SystemModelOutput {
	return i.ToSystemModelOutputWithContext(context.Background())
}

func (i SystemModelArgs) ToSystemModelOutputWithContext(ctx context.Context) SystemModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemModelOutput)
}

func (i SystemModelArgs) ToSystemModelPtrOutput() SystemModelPtrOutput {
	return i.ToSystemModelPtrOutputWithContext(context.Background())
}

func (i SystemModelArgs) ToSystemModelPtrOutputWithContext(ctx context.Context) SystemModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemModelOutput).ToSystemModelPtrOutputWithContext(ctx)
}

// SystemModelPtrInput is an input type that accepts SystemModelArgs, SystemModelPtr and SystemModelPtrOutput values.
// You can construct a concrete instance of `SystemModelPtrInput` via:
//
//	        SystemModelArgs{...}
//
//	or:
//
//	        nil
type SystemModelPtrInput interface {
	pulumi.Input

	ToSystemModelPtrOutput() SystemModelPtrOutput
	ToSystemModelPtrOutputWithContext(context.Context) SystemModelPtrOutput
}

type systemModelPtrType SystemModelArgs

func SystemModelPtr(v *SystemModelArgs) SystemModelPtrInput {
	return (*systemModelPtrType)(v)
}

func (*systemModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemModel)(nil)).Elem()
}

func (i *systemModelPtrType) ToSystemModelPtrOutput() SystemModelPtrOutput {
	return i.ToSystemModelPtrOutputWithContext(context.Background())
}

func (i *systemModelPtrType) ToSystemModelPtrOutputWithContext(ctx context.Context) SystemModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemModelPtrOutput)
}

type SystemModelOutput struct{ *pulumi.OutputState }

func (SystemModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemModel)(nil)).Elem()
}

func (o SystemModelOutput) ToSystemModelOutput() SystemModelOutput {
	return o
}

func (o SystemModelOutput) ToSystemModelOutputWithContext(ctx context.Context) SystemModelOutput {
	return o
}

func (o SystemModelOutput) ToSystemModelPtrOutput() SystemModelPtrOutput {
	return o.ToSystemModelPtrOutputWithContext(context.Background())
}

func (o SystemModelOutput) ToSystemModelPtrOutputWithContext(ctx context.Context) SystemModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemModel) *SystemModel {
		return &v
	}).(SystemModelPtrOutput)
}

func (o SystemModelOutput) Bootstrap() InstanceScriptPtrOutput {
	return o.ApplyT(func(v SystemModel) *InstanceScript { return v.Bootstrap }).(InstanceScriptPtrOutput)
}

func (o SystemModelOutput) Data_dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemModel) *string { return v.Data_dir }).(pulumi.StringPtrOutput)
}

func (o SystemModelOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v SystemModel) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

func (o SystemModelOutput) Service_config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemModel) *string { return v.Service_config }).(pulumi.StringPtrOutput)
}

func (o SystemModelOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemModel) *string { return v.User }).(pulumi.StringPtrOutput)
}

func (o SystemModelOutput) Work_dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemModel) *string { return v.Work_dir }).(pulumi.StringPtrOutput)
}

type SystemModelPtrOutput struct{ *pulumi.OutputState }

func (SystemModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemModel)(nil)).Elem()
}

func (o SystemModelPtrOutput) ToSystemModelPtrOutput() SystemModelPtrOutput {
	return o
}

func (o SystemModelPtrOutput) ToSystemModelPtrOutputWithContext(ctx context.Context) SystemModelPtrOutput {
	return o
}

func (o SystemModelPtrOutput) Elem() SystemModelOutput {
	return o.ApplyT(func(v *SystemModel) SystemModel {
		if v != nil {
			return *v
		}
		var ret SystemModel
		return ret
	}).(SystemModelOutput)
}

func (o SystemModelPtrOutput) Bootstrap() InstanceScriptPtrOutput {
	return o.ApplyT(func(v *SystemModel) *InstanceScript {
		if v == nil {
			return nil
		}
		return v.Bootstrap
	}).(InstanceScriptPtrOutput)
}

func (o SystemModelPtrOutput) Data_dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemModel) *string {
		if v == nil {
			return nil
		}
		return v.Data_dir
	}).(pulumi.StringPtrOutput)
}

func (o SystemModelPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SystemModel) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

func (o SystemModelPtrOutput) Service_config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemModel) *string {
		if v == nil {
			return nil
		}
		return v.Service_config
	}).(pulumi.StringPtrOutput)
}

func (o SystemModelPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemModel) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

func (o SystemModelPtrOutput) Work_dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemModel) *string {
		if v == nil {
			return nil
		}
		return v.Work_dir
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientModelInput)(nil)).Elem(), ClientModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComposeModelInput)(nil)).Elem(), ComposeModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComposeModelPtrInput)(nil)).Elem(), ComposeModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceScriptInput)(nil)).Elem(), InstanceScriptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceScriptPtrInput)(nil)).Elem(), InstanceScriptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemModelInput)(nil)).Elem(), SystemModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemModelPtrInput)(nil)).Elem(), SystemModelArgs{})
	pulumi.RegisterOutputType(ClientModelOutput{})
	pulumi.RegisterOutputType(ComposeModelOutput{})
	pulumi.RegisterOutputType(ComposeModelPtrOutput{})
	pulumi.RegisterOutputType(InstanceModelOutput{})
	pulumi.RegisterOutputType(InstanceModelArrayOutput{})
	pulumi.RegisterOutputType(InstanceScriptOutput{})
	pulumi.RegisterOutputType(InstanceScriptPtrOutput{})
	pulumi.RegisterOutputType(SystemModelOutput{})
	pulumi.RegisterOutputType(SystemModelPtrOutput{})
}
