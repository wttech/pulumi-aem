// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace WTTech.Aem.Compose
{
    [AemResourceType("aem:compose:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connection settings used to access the machine on which the AEM instance will be running.
        /// </summary>
        [Output("client")]
        public Output<Outputs.Client> Client { get; private set; } = null!;

        /// <summary>
        /// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        /// </summary>
        [Output("compose")]
        public Output<Outputs.Compose?> Compose { get; private set; } = null!;

        /// <summary>
        /// Files or directories to be copied into the machine.
        /// </summary>
        [Output("files")]
        public Output<ImmutableDictionary<string, string>?> Files { get; private set; } = null!;

        /// <summary>
        /// Current state of the configured AEM instances.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<Outputs.InstanceModel>> Instances { get; private set; } = null!;

        /// <summary>
        /// Operating system configuration for the machine on which AEM instance will be running.
        /// </summary>
        [Output("system")]
        public Output<Outputs.System?> System { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("aem:compose:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aem:compose:Instance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connection settings used to access the machine on which the AEM instance will be running.
        /// </summary>
        [Input("client", required: true)]
        public Input<Inputs.ClientArgs> Client { get; set; } = null!;

        /// <summary>
        /// AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        /// </summary>
        [Input("compose")]
        public Input<Inputs.ComposeArgs>? Compose { get; set; }

        [Input("files")]
        private InputMap<string>? _files;

        /// <summary>
        /// Files or directories to be copied into the machine.
        /// </summary>
        public InputMap<string> Files
        {
            get => _files ?? (_files = new InputMap<string>());
            set => _files = value;
        }

        /// <summary>
        /// Operating system configuration for the machine on which AEM instance will be running.
        /// </summary>
        [Input("system")]
        public Input<Inputs.SystemArgs>? System { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }
}
