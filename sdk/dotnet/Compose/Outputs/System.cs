// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace WTTech.Aem.Compose.Outputs
{

    [OutputType]
    public sealed class System
    {
        /// <summary>
        /// Script executed once upon instance connection, often for mounting on VM data volumes from attached disks (e.g., AWS EBS, Azure Disk Storage). This script runs only once, even during instance recreation, as changes are typically persistent and system-wide. If re-execution is needed, it is recommended to set up a new machine.
        /// </summary>
        public readonly Outputs.InstanceScript? Bootstrap;
        /// <summary>
        /// Remote root path in which AEM Compose files and unpacked AEM instances will be stored.
        /// </summary>
        public readonly string? Data_dir;
        /// <summary>
        /// Environment variables for AEM instances.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Env;
        /// <summary>
        /// Contents of the AEM system service definition file (systemd).
        /// </summary>
        public readonly string? Service_config;
        /// <summary>
        /// Enabled the AEM system service (systemd).
        /// </summary>
        public readonly bool? Service_enabled;
        /// <summary>
        /// System user under which AEM instance will be running. By default, the same as the user used to connect to the machine.
        /// </summary>
        public readonly string? User;
        /// <summary>
        /// Remote root path where provider-related files will be stored.
        /// </summary>
        public readonly string? Work_dir;

        [OutputConstructor]
        private System(
            Outputs.InstanceScript? bootstrap,

            string? data_dir,

            ImmutableDictionary<string, string>? env,

            string? service_config,

            bool? service_enabled,

            string? user,

            string? work_dir)
        {
            Bootstrap = bootstrap;
            Data_dir = data_dir;
            Env = env;
            Service_config = service_config;
            Service_enabled = service_enabled;
            User = user;
            Work_dir = work_dir;
        }
    }
}
