// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace WTTech.Aem.Compose.Inputs
{

    public sealed class ComposeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contents of the AEM Compose YML configuration file.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// Script(s) for configuring a launched instance. Must be idempotent as it is executed always when changed. Typically used for installing AEM service packs, setting up replication agents, etc.
        /// </summary>
        [Input("configure")]
        public Input<Inputs.InstanceScriptArgs>? Configure { get; set; }

        /// <summary>
        /// Script(s) for creating an instance or restoring it from a backup. Typically customized to provide AEM library files (quickstart.jar, license.properties, service packs) from alternative sources (e.g., AWS S3, Azure Blob Storage). Instance recreation is forced if changed.
        /// </summary>
        [Input("create")]
        public Input<Inputs.InstanceScriptArgs>? Create { get; set; }

        /// <summary>
        /// Script(s) for deleting a stopped instance.
        /// </summary>
        [Input("delete")]
        public Input<Inputs.InstanceScriptArgs>? Delete { get; set; }

        /// <summary>
        /// Toggle automatic AEM Compose CLI wrapper download. If set to false, assume the wrapper is present in the data directory.
        /// </summary>
        [Input("download")]
        public Input<bool>? Download { get; set; }

        /// <summary>
        /// Version of AEM Compose tool to use on remote machine.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ComposeArgs()
        {
        }
        public static new ComposeArgs Empty => new ComposeArgs();
    }
}
