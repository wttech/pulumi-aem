# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 client: pulumi.Input['ClientArgs'],
                 compose: Optional[pulumi.Input['ComposeArgs']] = None,
                 files: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system: Optional[pulumi.Input['SystemArgs']] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input['ClientArgs'] client: Connection settings used to access the machine on which the AEM instance will be running.
        :param pulumi.Input['ComposeArgs'] compose: AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] files: Files or directories to be copied into the machine.
        :param pulumi.Input['SystemArgs'] system: Operating system configuration for the machine on which AEM instance will be running.
        """
        pulumi.set(__self__, "client", client)
        if compose is not None:
            pulumi.set(__self__, "compose", compose)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def client(self) -> pulumi.Input['ClientArgs']:
        """
        Connection settings used to access the machine on which the AEM instance will be running.
        """
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: pulumi.Input['ClientArgs']):
        pulumi.set(self, "client", value)

    @property
    @pulumi.getter
    def compose(self) -> Optional[pulumi.Input['ComposeArgs']]:
        """
        AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        """
        return pulumi.get(self, "compose")

    @compose.setter
    def compose(self, value: Optional[pulumi.Input['ComposeArgs']]):
        pulumi.set(self, "compose", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Files or directories to be copied into the machine.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['SystemArgs']]:
        """
        Operating system configuration for the machine on which AEM instance will be running.
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['SystemArgs']]):
        pulumi.set(self, "system", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client: Optional[pulumi.Input[pulumi.InputType['ClientArgs']]] = None,
                 compose: Optional[pulumi.Input[pulumi.InputType['ComposeArgs']]] = None,
                 files: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system: Optional[pulumi.Input[pulumi.InputType['SystemArgs']]] = None,
                 __props__=None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClientArgs']] client: Connection settings used to access the machine on which the AEM instance will be running.
        :param pulumi.Input[pulumi.InputType['ComposeArgs']] compose: AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] files: Files or directories to be copied into the machine.
        :param pulumi.Input[pulumi.InputType['SystemArgs']] system: Operating system configuration for the machine on which AEM instance will be running.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client: Optional[pulumi.Input[pulumi.InputType['ClientArgs']]] = None,
                 compose: Optional[pulumi.Input[pulumi.InputType['ComposeArgs']]] = None,
                 files: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 system: Optional[pulumi.Input[pulumi.InputType['SystemArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if client is None and not opts.urn:
                raise TypeError("Missing required property 'client'")
            __props__.__dict__["client"] = client
            __props__.__dict__["compose"] = compose
            __props__.__dict__["files"] = files
            __props__.__dict__["system"] = system
            __props__.__dict__["instances"] = None
        super(Instance, __self__).__init__(
            'aem:compose:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InstanceArgs.__new__(InstanceArgs)

        __props__.__dict__["client"] = None
        __props__.__dict__["compose"] = None
        __props__.__dict__["files"] = None
        __props__.__dict__["instances"] = None
        __props__.__dict__["system"] = None
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def client(self) -> pulumi.Output['outputs.Client']:
        """
        Connection settings used to access the machine on which the AEM instance will be running.
        """
        return pulumi.get(self, "client")

    @property
    @pulumi.getter
    def compose(self) -> pulumi.Output[Optional['outputs.Compose']]:
        """
        AEM Compose CLI configuration. See documentation(https://github.com/wttech/aemc#configuration).
        """
        return pulumi.get(self, "compose")

    @property
    @pulumi.getter
    def files(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Files or directories to be copied into the machine.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.InstanceModel']]:
        """
        Current state of the configured AEM instances.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def system(self) -> pulumi.Output[Optional['outputs.System']]:
        """
        Operating system configuration for the machine on which AEM instance will be running.
        """
        return pulumi.get(self, "system")

