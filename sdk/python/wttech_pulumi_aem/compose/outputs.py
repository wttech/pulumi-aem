# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Client',
    'Compose',
    'InstanceModel',
    'InstanceScript',
    'System',
]

@pulumi.output_type
class Client(dict):
    def __init__(__self__, *,
                 settings: Mapping[str, str],
                 type: str,
                 action_timeout: Optional[str] = None,
                 credentials: Optional[Mapping[str, str]] = None,
                 state_timeout: Optional[str] = None):
        """
        :param Mapping[str, str] settings: Settings for the connection type
        :param str type: Type of connection to use to connect to the machine on which AEM instance will be running.
        :param str action_timeout: Used when trying to connect to the AEM instance machine (often right after creating it). Need to be enough long because various types of connections (like AWS SSM or SSH) may need some time to boot up the agent.
        :param Mapping[str, str] credentials: Credentials for the connection type
        :param str state_timeout: Used when reading the AEM instance state when determining the plan.
        """
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)
        if action_timeout is not None:
            pulumi.set(__self__, "action_timeout", action_timeout)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if state_timeout is not None:
            pulumi.set(__self__, "state_timeout", state_timeout)

    @property
    @pulumi.getter
    def settings(self) -> Mapping[str, str]:
        """
        Settings for the connection type
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection to use to connect to the machine on which AEM instance will be running.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def action_timeout(self) -> Optional[str]:
        """
        Used when trying to connect to the AEM instance machine (often right after creating it). Need to be enough long because various types of connections (like AWS SSM or SSH) may need some time to boot up the agent.
        """
        return pulumi.get(self, "action_timeout")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Mapping[str, str]]:
        """
        Credentials for the connection type
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def state_timeout(self) -> Optional[str]:
        """
        Used when reading the AEM instance state when determining the plan.
        """
        return pulumi.get(self, "state_timeout")


@pulumi.output_type
class Compose(dict):
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 configure: Optional['outputs.InstanceScript'] = None,
                 create: Optional['outputs.InstanceScript'] = None,
                 delete: Optional['outputs.InstanceScript'] = None,
                 download: Optional[bool] = None,
                 version: Optional[str] = None):
        """
        :param str config: Contents of the AEM Compose YML configuration file.
        :param 'InstanceScript' configure: Script(s) for configuring a launched instance. Must be idempotent as it is executed always when changed. Typically used for installing AEM service packs, setting up replication agents, etc.
        :param 'InstanceScript' create: Script(s) for creating an instance or restoring it from a backup. Typically customized to provide AEM library files (quickstart.jar, license.properties, service packs) from alternative sources (e.g., AWS S3, Azure Blob Storage). Instance recreation is forced if changed.
        :param 'InstanceScript' delete: Script(s) for deleting a stopped instance.
        :param bool download: Toggle automatic AEM Compose CLI wrapper download. If set to false, assume the wrapper is present in the data directory.
        :param str version: Version of AEM Compose tool to use on remote machine.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if configure is not None:
            pulumi.set(__self__, "configure", configure)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if download is not None:
            pulumi.set(__self__, "download", download)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        """
        Contents of the AEM Compose YML configuration file.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def configure(self) -> Optional['outputs.InstanceScript']:
        """
        Script(s) for configuring a launched instance. Must be idempotent as it is executed always when changed. Typically used for installing AEM service packs, setting up replication agents, etc.
        """
        return pulumi.get(self, "configure")

    @property
    @pulumi.getter
    def create(self) -> Optional['outputs.InstanceScript']:
        """
        Script(s) for creating an instance or restoring it from a backup. Typically customized to provide AEM library files (quickstart.jar, license.properties, service packs) from alternative sources (e.g., AWS S3, Azure Blob Storage). Instance recreation is forced if changed.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional['outputs.InstanceScript']:
        """
        Script(s) for deleting a stopped instance.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def download(self) -> Optional[bool]:
        """
        Toggle automatic AEM Compose CLI wrapper download. If set to false, assume the wrapper is present in the data directory.
        """
        return pulumi.get(self, "download")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of AEM Compose tool to use on remote machine.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class InstanceModel(dict):
    def __init__(__self__, *,
                 aem_version: str,
                 attributes: Sequence[str],
                 dir: str,
                 id: str,
                 run_modes: Sequence[str],
                 url: str):
        """
        :param str aem_version: Version of the AEM instance. Reflects service pack installations.
        :param Sequence[str] attributes: A brief description of the state details for a specific AEM instance. Possible states include 'created', 'uncreated', 'running', 'unreachable', 'up-to-date', and 'out-of-date'.
        :param str dir: Remote path in which AEM instance is stored.
        :param str id: Unique identifier of AEM instance defined in the configuration.
        :param Sequence[str] run_modes: A list of run modes for a specific AEM instance.
        :param str url: The machine-internal HTTP URL address used for communication with the AEM instance.
        """
        pulumi.set(__self__, "aem_version", aem_version)
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "run_modes", run_modes)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def aem_version(self) -> str:
        """
        Version of the AEM instance. Reflects service pack installations.
        """
        return pulumi.get(self, "aem_version")

    @property
    @pulumi.getter
    def attributes(self) -> Sequence[str]:
        """
        A brief description of the state details for a specific AEM instance. Possible states include 'created', 'uncreated', 'running', 'unreachable', 'up-to-date', and 'out-of-date'.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def dir(self) -> str:
        """
        Remote path in which AEM instance is stored.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of AEM instance defined in the configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def run_modes(self) -> Sequence[str]:
        """
        A list of run modes for a specific AEM instance.
        """
        return pulumi.get(self, "run_modes")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The machine-internal HTTP URL address used for communication with the AEM instance.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class InstanceScript(dict):
    def __init__(__self__, *,
                 inline: Optional[Sequence[str]] = None,
                 script: Optional[str] = None):
        """
        :param Sequence[str] inline: Inline shell commands to be executed
        :param str script: Multiline shell script to be executed
        """
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if script is not None:
            pulumi.set(__self__, "script", script)

    @property
    @pulumi.getter
    def inline(self) -> Optional[Sequence[str]]:
        """
        Inline shell commands to be executed
        """
        return pulumi.get(self, "inline")

    @property
    @pulumi.getter
    def script(self) -> Optional[str]:
        """
        Multiline shell script to be executed
        """
        return pulumi.get(self, "script")


@pulumi.output_type
class System(dict):
    def __init__(__self__, *,
                 bootstrap: Optional['outputs.InstanceScript'] = None,
                 data_dir: Optional[str] = None,
                 env: Optional[Mapping[str, str]] = None,
                 service_config: Optional[str] = None,
                 user: Optional[str] = None,
                 work_dir: Optional[str] = None):
        """
        :param 'InstanceScript' bootstrap: Script executed once upon instance connection, often for mounting on VM data volumes from attached disks (e.g., AWS EBS, Azure Disk Storage). This script runs only once, even during instance recreation, as changes are typically persistent and system-wide. If re-execution is needed, it is recommended to set up a new machine.
        :param str data_dir: Remote root path in which AEM Compose files and unpacked AEM instances will be stored.
        :param Mapping[str, str] env: Environment variables for AEM instances.
        :param str service_config: Contents of the AEM system service definition file (systemd).
        :param str user: System user under which AEM instance will be running. By default, the same as the user used to connect to the machine.
        :param str work_dir: Remote root path where provider-related files will be stored.
        """
        if bootstrap is not None:
            pulumi.set(__self__, "bootstrap", bootstrap)
        if data_dir is not None:
            pulumi.set(__self__, "data_dir", data_dir)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if service_config is not None:
            pulumi.set(__self__, "service_config", service_config)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @property
    @pulumi.getter
    def bootstrap(self) -> Optional['outputs.InstanceScript']:
        """
        Script executed once upon instance connection, often for mounting on VM data volumes from attached disks (e.g., AWS EBS, Azure Disk Storage). This script runs only once, even during instance recreation, as changes are typically persistent and system-wide. If re-execution is needed, it is recommended to set up a new machine.
        """
        return pulumi.get(self, "bootstrap")

    @property
    @pulumi.getter
    def data_dir(self) -> Optional[str]:
        """
        Remote root path in which AEM Compose files and unpacked AEM instances will be stored.
        """
        return pulumi.get(self, "data_dir")

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables for AEM instances.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def service_config(self) -> Optional[str]:
        """
        Contents of the AEM system service definition file (systemd).
        """
        return pulumi.get(self, "service_config")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        System user under which AEM instance will be running. By default, the same as the user used to connect to the machine.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def work_dir(self) -> Optional[str]:
        """
        Remote root path where provider-related files will be stored.
        """
        return pulumi.get(self, "work_dir")


