# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClientArgs',
    'ComposeArgs',
    'InstanceScriptArgs',
    'SystemArgs',
]

@pulumi.input_type
class ClientArgs:
    def __init__(__self__, *,
                 settings: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 action_timeout: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 state_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] settings: Settings for the connection type
        :param pulumi.Input[str] type: Type of connection to use to connect to the machine on which AEM instance will be running.
        :param pulumi.Input[str] action_timeout: Used when trying to connect to the AEM instance machine (often right after creating it). Need to be enough long because various types of connections (like AWS SSM or SSH) may need some time to boot up the agent.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] credentials: Credentials for the connection type
        :param pulumi.Input[str] state_timeout: Used when reading the AEM instance state when determining the plan.
        """
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)
        if action_timeout is not None:
            pulumi.set(__self__, "action_timeout", action_timeout)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if state_timeout is not None:
            pulumi.set(__self__, "state_timeout", state_timeout)

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Settings for the connection type
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of connection to use to connect to the machine on which AEM instance will be running.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def action_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Used when trying to connect to the AEM instance machine (often right after creating it). Need to be enough long because various types of connections (like AWS SSM or SSH) may need some time to boot up the agent.
        """
        return pulumi.get(self, "action_timeout")

    @action_timeout.setter
    def action_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_timeout", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Credentials for the connection type
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def state_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Used when reading the AEM instance state when determining the plan.
        """
        return pulumi.get(self, "state_timeout")

    @state_timeout.setter
    def state_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_timeout", value)


@pulumi.input_type
class ComposeArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 configure: Optional[pulumi.Input['InstanceScriptArgs']] = None,
                 create: Optional[pulumi.Input['InstanceScriptArgs']] = None,
                 delete: Optional[pulumi.Input['InstanceScriptArgs']] = None,
                 download: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config: Contents of the AEM Compose YML configuration file.
        :param pulumi.Input['InstanceScriptArgs'] configure: Script(s) for configuring a launched instance. Must be idempotent as it is executed always when changed. Typically used for installing AEM service packs, setting up replication agents, etc.
        :param pulumi.Input['InstanceScriptArgs'] create: Script(s) for creating an instance or restoring it from a backup. Typically customized to provide AEM library files (quickstart.jar, license.properties, service packs) from alternative sources (e.g., AWS S3, Azure Blob Storage). Instance recreation is forced if changed.
        :param pulumi.Input['InstanceScriptArgs'] delete: Script(s) for deleting a stopped instance.
        :param pulumi.Input[bool] download: Toggle automatic AEM Compose CLI wrapper download. If set to false, assume the wrapper is present in the data directory.
        :param pulumi.Input[str] version: Version of AEM Compose tool to use on remote machine.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if configure is not None:
            pulumi.set(__self__, "configure", configure)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if download is not None:
            pulumi.set(__self__, "download", download)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Contents of the AEM Compose YML configuration file.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def configure(self) -> Optional[pulumi.Input['InstanceScriptArgs']]:
        """
        Script(s) for configuring a launched instance. Must be idempotent as it is executed always when changed. Typically used for installing AEM service packs, setting up replication agents, etc.
        """
        return pulumi.get(self, "configure")

    @configure.setter
    def configure(self, value: Optional[pulumi.Input['InstanceScriptArgs']]):
        pulumi.set(self, "configure", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input['InstanceScriptArgs']]:
        """
        Script(s) for creating an instance or restoring it from a backup. Typically customized to provide AEM library files (quickstart.jar, license.properties, service packs) from alternative sources (e.g., AWS S3, Azure Blob Storage). Instance recreation is forced if changed.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input['InstanceScriptArgs']]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input['InstanceScriptArgs']]:
        """
        Script(s) for deleting a stopped instance.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input['InstanceScriptArgs']]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def download(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle automatic AEM Compose CLI wrapper download. If set to false, assume the wrapper is present in the data directory.
        """
        return pulumi.get(self, "download")

    @download.setter
    def download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "download", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of AEM Compose tool to use on remote machine.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class InstanceScriptArgs:
    def __init__(__self__, *,
                 inline: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 script: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inline: Inline shell commands to be executed
        :param pulumi.Input[str] script: Multiline shell script to be executed
        """
        if inline is not None:
            pulumi.set(__self__, "inline", inline)
        if script is not None:
            pulumi.set(__self__, "script", script)

    @property
    @pulumi.getter
    def inline(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Inline shell commands to be executed
        """
        return pulumi.get(self, "inline")

    @inline.setter
    def inline(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inline", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        Multiline shell script to be executed
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)


@pulumi.input_type
class SystemArgs:
    def __init__(__self__, *,
                 bootstrap: Optional[pulumi.Input['InstanceScriptArgs']] = None,
                 data_dir: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_config: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 work_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InstanceScriptArgs'] bootstrap: Script executed once upon instance connection, often for mounting on VM data volumes from attached disks (e.g., AWS EBS, Azure Disk Storage). This script runs only once, even during instance recreation, as changes are typically persistent and system-wide. If re-execution is needed, it is recommended to set up a new machine.
        :param pulumi.Input[str] data_dir: Remote root path in which AEM Compose files and unpacked AEM instances will be stored.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Environment variables for AEM instances.
        :param pulumi.Input[str] service_config: Contents of the AEM system service definition file (systemd).
        :param pulumi.Input[str] user: System user under which AEM instance will be running. By default, the same as the user used to connect to the machine.
        :param pulumi.Input[str] work_dir: Remote root path where provider-related files will be stored.
        """
        if bootstrap is not None:
            pulumi.set(__self__, "bootstrap", bootstrap)
        if data_dir is not None:
            pulumi.set(__self__, "data_dir", data_dir)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if service_config is not None:
            pulumi.set(__self__, "service_config", service_config)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @property
    @pulumi.getter
    def bootstrap(self) -> Optional[pulumi.Input['InstanceScriptArgs']]:
        """
        Script executed once upon instance connection, often for mounting on VM data volumes from attached disks (e.g., AWS EBS, Azure Disk Storage). This script runs only once, even during instance recreation, as changes are typically persistent and system-wide. If re-execution is needed, it is recommended to set up a new machine.
        """
        return pulumi.get(self, "bootstrap")

    @bootstrap.setter
    def bootstrap(self, value: Optional[pulumi.Input['InstanceScriptArgs']]):
        pulumi.set(self, "bootstrap", value)

    @property
    @pulumi.getter
    def data_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Remote root path in which AEM Compose files and unpacked AEM instances will be stored.
        """
        return pulumi.get(self, "data_dir")

    @data_dir.setter
    def data_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_dir", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables for AEM instances.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def service_config(self) -> Optional[pulumi.Input[str]]:
        """
        Contents of the AEM system service definition file (systemd).
        """
        return pulumi.get(self, "service_config")

    @service_config.setter
    def service_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        System user under which AEM instance will be running. By default, the same as the user used to connect to the machine.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def work_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Remote root path where provider-related files will be stored.
        """
        return pulumi.get(self, "work_dir")

    @work_dir.setter
    def work_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_dir", value)


