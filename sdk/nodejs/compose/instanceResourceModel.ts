// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class InstanceResourceModel extends pulumi.CustomResource {
    /**
     * Get an existing InstanceResourceModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InstanceResourceModel {
        return new InstanceResourceModel(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aem:compose:InstanceResourceModel';

    /**
     * Returns true if the given object is an instance of InstanceResourceModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceResourceModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceResourceModel.__pulumiType;
    }

    public readonly client!: pulumi.Output<outputs.compose.ClientModel>;
    public readonly compose!: pulumi.Output<outputs.compose.ComposeModel | undefined>;
    public readonly files!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly instances!: pulumi.Output<outputs.compose.InstanceModel[]>;
    public readonly system!: pulumi.Output<outputs.compose.SystemModel | undefined>;

    /**
     * Create a InstanceResourceModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceResourceModelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.client === undefined) && !opts.urn) {
                throw new Error("Missing required property 'client'");
            }
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["compose"] = args ? args.compose : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["instances"] = undefined /*out*/;
        } else {
            resourceInputs["client"] = undefined /*out*/;
            resourceInputs["compose"] = undefined /*out*/;
            resourceInputs["files"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceResourceModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InstanceResourceModel resource.
 */
export interface InstanceResourceModelArgs {
    client: pulumi.Input<inputs.compose.ClientModelArgs>;
    compose?: pulumi.Input<inputs.compose.ComposeModelArgs>;
    files?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    system?: pulumi.Input<inputs.compose.SystemModelArgs>;
}
